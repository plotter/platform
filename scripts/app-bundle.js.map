{"version":3,"sources":["app.ts","environment.ts","main.ts","platform/state-config/state-provider.ts","C:/a/p/platform/src/platform/state-config/state-config.js","platform/platform-startup.ts","resources/index.ts","C:/a/p/platform/src/app.html"],"names":[],"mappings":";;IAAA;QAAA;YACS,YAAO,GAAG,cAAc,CAAC;QAClC,CAAC;QAAD,UAAC;IAAD,CAFA,AAEC,IAAA;IAFY,WAAG,MAEf,CAAA;;;;;ICFD;sBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;ICEK,OAAQ,CAAC,MAAM,CAAC;QACrB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAde,iBAAS,YAcxB,CAAA;;;;;ICrBD,WAAY,iBAAiB;QACzB,+DAAO,CAAA;QACP,yEAAY,CAAA;IAChB,CAAC,EAHW,yBAAiB,KAAjB,yBAAiB,QAG5B;IAHD,IAAY,iBAAiB,GAAjB,yBAGX,CAAA;;;ACPD;AACA;AACA;AACA;;;ICAA;QAEI,MAAM,CAAC,IAAI,OAAO,CAAc,UAAC,OAAO,EAAE,MAAM;YAG5C,IAAI,WAAW,GAAgB;gBAC3B,SAAS,EAAE;oBACP,EAAE,IAAI,EAAE,kCAAiB,CAAC,YAAY,EAAE;iBAC3C;gBACD,QAAQ,EAAE,KAAK;aAClB,CAAC;YAEF,OAAO,CAAC,WAAW,CAAC,CAAC;QAQzB,CAAC,CAAC,CAAC;IACP,CAAC;IArBe,uBAAe,kBAqB9B,CAAA;;;;;ICtBD,mBAA0B,MAA8B;IAExD,CAAC;IAFe,iBAAS,YAExB,CAAA;;;ACJD","file":"app-bundle.js","sourcesContent":["export class App {\n  public message = 'Hello World!';\n}\n","export default {\n  debug: true,\n  testing: true,\n};\n","import {Aurelia} from 'aurelia-framework';\nimport environment from './environment';\n\n// Configure Bluebird Promises.\n// Note: You may want to use environment-specific configuration.\n(<any> Promise).config({\n  warnings: {\n    wForgottenReturn: false,\n  },\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export interface StateProvider {\r\n    type: StateProviderType;\r\n}\r\n\r\nexport enum StateProviderType {\r\n    service,\r\n    localStorage\r\n}\r\n",null,"import { StateConfig } from './state-config/state-config';\r\nimport { StateProviderType } from './state-config/state-provider';\r\n\r\nexport function platformStartup(): Promise<StateConfig> {\r\n\r\n    return new Promise<StateConfig>((resolve, reject) => {\r\n\r\n        // for now, hardwire a resolve with a state config\r\n        let stateConfig: StateConfig = {\r\n            providers: [\r\n                { type: StateProviderType.localStorage },\r\n            ],\r\n            readOnly: false,\r\n        };\r\n\r\n        resolve(stateConfig);\r\n\r\n        // check if (and use) platform origin has state-config\r\n\r\n        // check if (and use) local storage has state-config\r\n\r\n        // create state config in local storage\r\n\r\n    });\r\n}\r\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  // config.globalResources([]);\n}\n",null],"sourceRoot":"..\\src"}